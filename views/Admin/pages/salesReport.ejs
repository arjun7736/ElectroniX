
  <%- include('../componants/header') %>

  <div class="container mx-auto px-4">
    <h1 class="text-2xl font-bold mb-4 mt-5">Sales Report</h1>

    <div class="flex items-center justify-between mb-4">
      <label for="dateFrom" class="block text-gray-700 font-bold mb-2">Select Date </label>
      <div class="flex items-center">
        <input type="date" id="dateFrom" class="border border-gray-400 rounded-md px-2 mr-2">
        <input type="date" id="dateTo" class="border border-gray-400 rounded-md px-2">
        <button id="filterBtn" class="bg-blue-500 ml-5 text-white px-4 py-2 rounded-md hover:bg-blue-700">Filter</button>
      </div>
    </div>

    <table id="salesTable" class="w-full table-auto border border-gray-500">

    </table>
  </div>

  <%- include('../componants/footer') %>

  <script>
    document.getElementById('filterBtn').addEventListener('click', () => {
        const dateFrom = document.getElementById('dateFrom').value;
        const dateTo = document.getElementById('dateTo').value;

        const requestData = {
            dateFrom: dateFrom,
            dateTo: dateTo
        };

        fetch('/admin/salesReport', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        })
        .then(response => response.json())
        .then(data => {
            console.log(data)
            updateTable(data.salesData);
        })
        .catch(error => console.error('Error fetching data:', error));
    });


    function updateTable(data) {
  console.log(data);
  
  const table = document.getElementById('salesTable');
  table.innerHTML = '';

  
 // Create a container for buttons above the table
 const buttonContainer = document.createElement('div');
  buttonContainer.classList.add('flex', 'justify-end', 'mt-4','mb-5'); // Position buttons to the right

  // Add download buttons inside the container
  const pdfButton = document.createElement('button');
  pdfButton.textContent = 'Download as PDF';
  pdfButton.classList.add('bg-blue-500', 'text-white', 'px-4', 'py-2', 'rounded-md', 'hover:bg-blue-700');
  // Implement PDF download functionality here
  buttonContainer.appendChild(pdfButton);

  const excelButton = document.createElement('button');
  excelButton.textContent = 'Download as Excel';
  excelButton.classList.add('bg-green-500', 'text-white', 'px-4','ml-3', 'py-2', 'rounded-md', 'hover:bg-green-700');
  // Implement Excel download functionality here
  buttonContainer.appendChild(excelButton);

  // Insert the button container before the table
  table.parentNode.insertBefore(buttonContainer, table);





  // Add table header with Tailwind classes
  const headerRow = table.insertRow(0);
  headerRow.classList.add('bg-gray-200', 'text-gray-600', 'text-left', 'font-bold');
  const headers = ['Order ID', 'Customer', 'Date', 'Total', 'Status'];
  headers.forEach(header => {
    const th = document.createElement('th');
    th.textContent = header;
    th.classList.add('px-4', 'py-2');
    headerRow.appendChild(th);
  });

  // Add table rows with Tailwind classes
   data.forEach(item => {
    const row = table.insertRow();
    row.classList.add('border-b', 'border-gray-400');
    const values = [
      item.orderId,
      item.user.username,
      (new Date(item.orderDate)).toLocaleDateString('en-US'),
      `â‚¹ ${item.grandTotal.toFixed(2)}`,
      item.status,
    ];
    values.forEach(value => {
      const cell = row.insertCell();
      cell.textContent = value;
      cell.classList.add('px-4', 'py-2');

      // Conditional styling based on status
      if (item.status === 'Delivered') {
        cell.classList.add('text-green-600');
      } else if (item.status === 'Return' || item.status === 'Cancelled') {
        cell.classList.add('text-red-600');
      }
    });

   
  });

}

</script>


